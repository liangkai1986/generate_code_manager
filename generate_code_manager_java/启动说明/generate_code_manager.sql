/*
Navicat MySQL Data Transfer

Source Server         : 腾讯
Source Server Version : 50633
Source Host           : 122.152.224.74:3306
Source Database       : generate_code_manager

Target Server Type    : MYSQL
Target Server Version : 50633
File Encoding         : 65001

Date: 2018-08-22 15:49:01
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for config
-- ----------------------------
DROP TABLE IF EXISTS `config`;
CREATE TABLE `config` (
  `config_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '配置id',
  `config_name` varchar(255) DEFAULT NULL COMMENT '配置名称',
  `input_type` varchar(255) DEFAULT NULL COMMENT '类型（多选check 单选radio）',
  `project_id` int(11) NOT NULL COMMENT '项目id',
  `code` varchar(100) NOT NULL COMMENT '配置的编码  唯一  方便在模板的生成的时候调用',
  PRIMARY KEY (`config_id`),
  UNIQUE KEY `code` (`code`),
  KEY `project_id` (`project_id`),
  KEY `config_id` (`config_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COMMENT='配置表';

-- ----------------------------
-- Records of config
-- ----------------------------
INSERT INTO `config` VALUES ('1', '66', 'radio', '1', 'a');
INSERT INTO `config` VALUES ('2', '是否唯一判断', 'radio', '13', 'uniqueness');
INSERT INTO `config` VALUES ('4', '添加-参数是否必填', 'radio', '13', 'add_param_required');
INSERT INTO `config` VALUES ('6', '编辑-参数是否必填', 'radio', '13', 'edit_param_required');
INSERT INTO `config` VALUES ('7', 'controller 参数正则校验', 'check', '13', 'param_regex');
INSERT INTO `config` VALUES ('8', '校验字符串字段长度【0->数据库字段长度】', 'radio', '13', 'verify_column_length');

-- ----------------------------
-- Table structure for config_record
-- ----------------------------
DROP TABLE IF EXISTS `config_record`;
CREATE TABLE `config_record` (
  `config_record_id` int(11) NOT NULL AUTO_INCREMENT,
  `config_id` int(11) DEFAULT NULL,
  `template_id` int(11) DEFAULT NULL COMMENT '模板id',
  `project_id` int(11) DEFAULT NULL COMMENT '项目id',
  PRIMARY KEY (`config_record_id`),
  KEY `config_id` (`config_id`),
  KEY `template_id` (`template_id`),
  KEY `project_id` (`project_id`)
) ENGINE=InnoDB AUTO_INCREMENT=303 DEFAULT CHARSET=utf8mb4 COMMENT='配置 关联记录表';

-- ----------------------------
-- Records of config_record
-- ----------------------------
INSERT INTO `config_record` VALUES ('128', '1', '1', '1');
INSERT INTO `config_record` VALUES ('132', '1', '9', '1');
INSERT INTO `config_record` VALUES ('298', '2', '22', '13');
INSERT INTO `config_record` VALUES ('299', '4', '22', '13');
INSERT INTO `config_record` VALUES ('300', '6', '22', '13');
INSERT INTO `config_record` VALUES ('301', '7', '22', '13');
INSERT INTO `config_record` VALUES ('302', '8', '22', '13');

-- ----------------------------
-- Table structure for configKeyVal
-- ----------------------------
DROP TABLE IF EXISTS `configKeyVal`;
CREATE TABLE `configKeyVal` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `config_id` int(11) NOT NULL COMMENT '编码',
  `name` text,
  `val` text,
  `val1` text,
  `val2` text,
  `check` int(1) DEFAULT '0' COMMENT '是否选中  1选中  0没选中',
  `listImportPkg` text COMMENT '这个选中的值 需要引入的包   #分割',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 COMMENT='配置 的 key and val的表';

-- ----------------------------
-- Records of configKeyVal
-- ----------------------------
INSERT INTO `configKeyVal` VALUES ('6', '2', '唯一', 'true', '', '', '0', 'import com.baomidou.mybatisplus.mapper.EntityWrapper;');
INSERT INTO `configKeyVal` VALUES ('7', '2', '不唯一', 'false', null, null, '0', null);
INSERT INTO `configKeyVal` VALUES ('8', '4', '必填', 'true', '', '', '0', 'import javax.validation.constraints.NotEmpty;');
INSERT INTO `configKeyVal` VALUES ('9', '4', '非必填', 'false', null, null, '0', null);
INSERT INTO `configKeyVal` VALUES ('10', '5', '手机号校验', 'a', null, null, '0', null);
INSERT INTO `configKeyVal` VALUES ('11', '6', '必填', 'true', '', '', '0', 'import javax.validation.constraints.NotEmpty;');
INSERT INTO `configKeyVal` VALUES ('12', '6', '非必填', 'false', null, null, '0', null);
INSERT INTO `configKeyVal` VALUES ('13', '7', '手机号校验', '@Pattern(regexp = \"^[1]{1}[0-9]{10}$\", message = \"手机号格式不正确\")', null, null, '0', 'import javax.validation.constraints.Pattern;');
INSERT INTO `configKeyVal` VALUES ('14', '8', '校验', 'true', '', '', '0', 'import org.hibernate.validator.constraints.Length;');
INSERT INTO `configKeyVal` VALUES ('15', '8', '不检验', 'false', null, null, '0', null);

-- ----------------------------
-- Table structure for jdbc_config
-- ----------------------------
DROP TABLE IF EXISTS `jdbc_config`;
CREATE TABLE `jdbc_config` (
  `jdbc_config_id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL COMMENT '数据源名称',
  `db_name` varchar(255) DEFAULT NULL COMMENT '数据库名称',
  `jdbcUrl` varchar(255) DEFAULT NULL,
  `user` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`jdbc_config_id`)
) ENGINE=InnoDB AUTO_INCREMENT=58 DEFAULT CHARSET=utf8 COMMENT='jdbc_config啊';

-- ----------------------------
-- Records of jdbc_config
-- ----------------------------
INSERT INTO `jdbc_config` VALUES ('1', '代码生成', 'generate_code_manager', 'jdbc:mysql://122.152.224.74/generate_code_manager?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull', 'gcm', 'gcm');
INSERT INTO `jdbc_config` VALUES ('57', '权限管理系统', 'authManager', 'jdbc:mysql://122.152.224.74/authManager?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull', 'authManager', 'authManager');

-- ----------------------------
-- Table structure for project
-- ----------------------------
DROP TABLE IF EXISTS `project`;
CREATE TABLE `project` (
  `project_id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `jdbc_config_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`project_id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COMMENT='项目';

-- ----------------------------
-- Records of project
-- ----------------------------
INSERT INTO `project` VALUES ('1', '项目-测试', '1');
INSERT INTO `project` VALUES ('13', '权限管理', '57');

-- ----------------------------
-- Table structure for template
-- ----------------------------
DROP TABLE IF EXISTS `template`;
CREATE TABLE `template` (
  `template_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '模板id',
  `project_id` int(11) DEFAULT NULL COMMENT '项目关联id',
  `content` longtext COMMENT '模板内容',
  `name` varchar(255) DEFAULT NULL COMMENT '模板名称',
  `path` varchar(255) DEFAULT NULL COMMENT '文件生成路径',
  PRIMARY KEY (`template_id`),
  KEY `template_id` (`template_id`),
  KEY `project_id` (`project_id`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8 COMMENT='模板';

-- ----------------------------
-- Records of template
-- ----------------------------
INSERT INTO `template` VALUES ('1', '1', '欢迎：${user!}${user!}---${data.entityNameFirstUpperCase!}ddd', 'aqqqqq', 'D:\\${data.entityNameFirstUpperCase!}.txt');
INSERT INTO `template` VALUES ('9', '1', 'ddddddddddddddddddddddd', '模板-9', 'D:\\${data.entityNameFirstUpperCase!}111.txt');
INSERT INTO `template` VALUES ('17', '13', 'package com.authManager.entity;\n\nimport com.baomidou.mybatisplus.enums.IdType;\nimport com.baomidou.mybatisplus.annotations.TableId;\nimport com.baomidou.mybatisplus.annotations.TableField;\nimport com.baomidou.mybatisplus.annotations.TableName;\nimport java.io.Serializable;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n<#-- 用到的包 -->\n<#list data.listImportPkg as importPkg>\nimport ${importPkg};\n</#list>\n\n/**\n * <p>\n * 【${data.tableComment!}】实体类\n * </p>\n *\n * @author 小旋风\n * @since ${.now?string?date(\'yyyy-MM-dd\')}\n */\n@TableName(\"${data.tableName!}\")\n@ApiModel(description=\"${data.tableComment!}\")\npublic class ${data.entityNameFirstUpperCase!}  implements Serializable{\n	private static final long serialVersionUID = 1L;\n\n	<#list data.listColumnInfo as columnInfo>\n	/**\n	 * ${columnInfo.columnComment!}\n	 */\n	@ApiModelProperty(value = \"${columnInfo.columnComment!}\")\n    <#if columnInfo.columnKey??&&columnInfo.columnKey == \'PRI\'>\n    @TableId(value=\"${columnInfo.columnName}\", type= IdType.AUTO)\n    <#else>\n    @TableField(value=\"${columnInfo.columnName}\")\n    </#if>\n    private ${columnInfo.entityType} ${columnInfo.entityName!};\n	</#list>\n	\n	<#list data.listColumnInfo as columnInfo>\n	public ${columnInfo.entityType} get${columnInfo.entityNameFirstUpperCase!}() {\n		return this.${columnInfo.entityName!};\n	}\n	\n	public ${data.entityNameFirstUpperCase!} set${columnInfo.entityNameFirstUpperCase!}(${columnInfo.entityType} ${columnInfo.entityName!}) {\n		this.${columnInfo.entityName!} = ${columnInfo.entityName!};\n		return this;\n	}\n\n</#list>\n}', 'entity', 'D:\\git\\authManager\\authManager-entity\\src\\main\\java\\com\\authManager\\entity\\${data.entityNameFirstUpperCase!}.java');
INSERT INTO `template` VALUES ('18', '13', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.authManager.entity.${data.entityNameFirstUpperCase!}\">\n\n    <!-- 通用查询结果列 -->\n    <sql id=\"Base_Column_List\">\n        <#list data.listColumnInfo as columnInfo><#if columnInfo_index!=0>, </#if>${columnInfo.columnName} AS ${columnInfo.entityName!}</#list>\n    </sql>\n\n</mapper>', 'xml', 'D:\\git\\authManager\\authManager-server\\src\\main\\resources\\mapper\\${data.entityNameFirstUpperCase!}Mapper.xml');
INSERT INTO `template` VALUES ('19', '13', 'package com.authManager.server.dao;\n\nimport com.authManager.entity.${data.entityNameFirstUpperCase!};\nimport com.baomidou.mybatisplus.mapper.BaseMapper;\n\n/**\n * <p>\n * 【${data.tableComment!}】 Mapper 接口\n * </p>\n *\n * @author 小旋风\n * @since ${.now?string?date(\'yyyy-MM-dd\')}\n */\npublic interface ${data.entityNameFirstUpperCase!}Mapper extends BaseMapper<${data.entityNameFirstUpperCase!}> {\n	/*\n	 *【1】获取单个对象的方法用 get 做前缀。\n	 *【2】获取多个对象的方法用 list 做前缀。\n	 *【3】获取统计值的方法用 count 做前缀。\n	 *【4】插入的方法用 save（ 推荐 ） 或 insert 做前缀。\n	 *【5】删除的方法用 remove（ 推荐 ） 或 delete 做前缀。\n	 *【6】修改的方法用 update 做前缀。\n	 */\n\n        /*\n	 *通用查询结果列\n	 *<#list data.listColumnInfo as columnInfo><#if columnInfo_index!=0>, </#if>${columnInfo.columnName} AS ${columnInfo.entityName!}</#list>\n	 *\n	 *带表名\n	 *<#list data.listColumnInfo as columnInfo><#if columnInfo_index!=0>, </#if>${data.tableName}.${columnInfo.columnName} AS ${columnInfo.entityName!}</#list>\n	 */\n    \n        \n    \n}', 'Mapper', 'D:\\git\\authManager\\authManager-server\\src\\main\\java\\com\\authManager\\server\\dao\\${data.entityNameFirstUpperCase!}Mapper.java');
INSERT INTO `template` VALUES ('20', '13', 'package com.authManager.server.service;\n\nimport com.authManager.entity.${data.entityNameFirstUpperCase!};\nimport com.baomidou.mybatisplus.service.IService;\n\nimport java.util.Map;\n\nimport com.commons.base.model.AdminPage;\nimport com.commons.base.model.ResultData;\n\n/**\n * <p>\n * 【${data.tableComment!}】 服务类\n * </p>\n *\n * @author 小旋风\n * @since ${.now?string?date(\'yyyy-MM-dd\')}\n */\npublic interface I${data.entityNameFirstUpperCase!}Service extends IService<${data.entityNameFirstUpperCase!}> {\n	/*\n	 *【1】获取单个对象的方法用 get 做前缀。\n	 *【2】获取多个对象的方法用 list 做前缀。\n	 *【3】获取统计值的方法用 count 做前缀。\n	 *【4】插入的方法用 save（ 推荐 ） 或 insert 做前缀。\n	 *【5】删除的方法用 remove（ 推荐 ） 或 delete 做前缀。\n	 *【6】修改的方法用 update 做前缀。\n	 */\n	 \n	 ResultData<AdminPage<${data.entityNameFirstUpperCase!}>> list${data.entityNameFirstUpperCase!}(Map<String, Object> paramMap);\n}\n', 'Service', 'D:\\git\\authManager\\authManager-server\\src\\main\\java\\com\\authManager\\server\\service\\I${data.entityNameFirstUpperCase!}Service.java');
INSERT INTO `template` VALUES ('21', '13', 'package com.authManager.server.service.impl;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Map;\n\nimport com.baomidou.mybatisplus.service.impl.ServiceImpl;\nimport com.baomidou.mybatisplus.mapper.EntityWrapper;\nimport com.baomidou.mybatisplus.mapper.Wrapper;\nimport com.baomidou.mybatisplus.plugins.Page;\n\nimport com.authManager.server.service.I${data.entityNameFirstUpperCase!}Service;\nimport com.authManager.server.dao.${data.entityNameFirstUpperCase!}Mapper;\nimport com.authManager.entity.${data.entityNameFirstUpperCase!};\n\nimport com.commons.base.model.AdminPage;\nimport com.commons.base.model.ResultCode;\nimport com.commons.base.model.ResultData;\n\n/**\n * <p>\n * 【${data.tableComment!}】 服务实现类\n * </p>\n *\n * @author 小旋风\n * @since ${.now?string?date(\'yyyy-MM-dd\')}\n */\n@Service\npublic class ${data.entityNameFirstUpperCase!}ServiceImpl extends ServiceImpl<${data.entityNameFirstUpperCase!}Mapper, ${data.entityNameFirstUpperCase!}> implements I${data.entityNameFirstUpperCase!}Service{\n	\n	@SuppressWarnings(\"unused\")\n	private static final Logger log = LoggerFactory.getLogger(${data.entityNameFirstUpperCase!}ServiceImpl.class);\n	\n\n	@Override\n	public ResultData<AdminPage<${data.entityNameFirstUpperCase!}>> list${data.entityNameFirstUpperCase!}(Map<String, Object> paramMap) {\n		Page<${data.entityNameFirstUpperCase!}> page = new Page<>(Integer.valueOf(String.valueOf(paramMap.get(\"pageNum\"))),\n				Integer.valueOf(String.valueOf(paramMap.get(\"pageSize\"))));\n		Wrapper<${data.entityNameFirstUpperCase!}> entityWrapper = new EntityWrapper<>();\n		\n			<#list data.listColumnInfo as columnInfo>\n				<#if  columnInfo.entityName == \'creater\'>\n		        <#elseif  columnInfo.entityName == \'createTime\'>\n					//开始-${columnInfo.columnComment!}\n					if(paramMap.get(\"start_${columnInfo.entityName}\")!=null) {\n						entityWrapper.le(\"${data.tableName!}.${columnInfo.columnName}\", paramMap.get(\"start_${columnInfo.entityName}\"));\n					}\n					//结束-${columnInfo.columnComment!}\n					if(paramMap.get(\"end_${columnInfo.entityName}\")!=null) {\n						entityWrapper.le(\"${data.tableName!}.${columnInfo.columnName}\", paramMap.get(\"end_${columnInfo.entityName}\"));\n					}\n		        <#elseif  columnInfo.entityName == \'updater\'>\n		        <#elseif  columnInfo.entityName == \'updateTime\'>\n		        <#else>\n				    <#if  columnInfo.entityType == \'Date\'>\n						//开始-${columnInfo.columnComment!}\n						if(paramMap.get(\"start_${columnInfo.entityName}\")!=null) {\n							entityWrapper.le(\"${data.tableName!}.${columnInfo.columnName}\", paramMap.get(\"start_${columnInfo.entityName}\"));\n						}\n						//结束-${columnInfo.columnComment!}\n						if(paramMap.get(\"end_${columnInfo.entityName}\")!=null) {\n							entityWrapper.le(\"${data.tableName!}.${columnInfo.columnName}\", paramMap.get(\"end_${columnInfo.entityName}\"));\n						}\n				    <#elseif  columnInfo.entityType == \'String\'>\n						//${columnInfo.columnComment!}\n						if(paramMap.get(\"${columnInfo.entityName}\")!=null) {\n							entityWrapper.like(\"${data.tableName!}.${columnInfo.columnName}\", String.valueOf(paramMap.get(\"${columnInfo.entityName}\")));\n						}\n				    <#else>\n						//${columnInfo.columnComment!}\n						if(paramMap.get(\"${columnInfo.entityName}\")!=null) {\n							entityWrapper.eq(\"${data.tableName!}.${columnInfo.columnName}\", paramMap.get(\"${columnInfo.entityName}\"));\n						}\n					</#if>\n				</#if>\n		</#list>\n		this.selectPage(page, entityWrapper);\n		return new ResultData.Builder<AdminPage<${data.entityNameFirstUpperCase!}>>(ResultCode.success)\n				.setData(new AdminPage<${data.entityNameFirstUpperCase!}>(page)).build();\n	}\n}\n', 'ServiceImpl', 'D:\\git\\authManager\\authManager-server\\src\\main\\java\\com\\authManager\\server\\service\\impl\\${data.entityNameFirstUpperCase!}ServiceImpl.java');
INSERT INTO `template` VALUES ('22', '13', 'package com.authManager.server.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.validation.annotation.Validated;\nimport org.apache.commons.lang3.StringUtils;\n\nimport com.authManager.entity.${data.entityNameFirstUpperCase!};\nimport com.authManager.server.service.I${data.entityNameFirstUpperCase!}Service;\n\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.Api;\n\nimport com.commons.base.model.AdminPage;\nimport com.commons.base.model.ResultCode;\nimport com.commons.base.model.ResultData;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Date;\n\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n<#-- 配置用到的包 -->\n<#if  data.listConfigImportPkg??>\n<#list data.listConfigImportPkg as importPkg>\n	${importPkg}\n</#list>\n</#if>\n/**\n * <p>\n * 【${data.tableComment!}】 前端控制器\n * </p>\n *\n * @author 小旋风\n * @since ${.now?string?date(\'yyyy-MM-dd\')}\n */\n\n@Api(value=\"/admin/${data.entityName!}\", tags=\"【${data.tableComment!}】操作\")\n@RestController\n@Validated\n@RequestMapping(value = \"/admin/${data.entityName!}\", produces = BaseController.defProduces)\npublic class ${data.entityNameFirstUpperCase!}Controller extends BaseController {\n	@SuppressWarnings(\"unused\")\n	private static final Logger log = LoggerFactory.getLogger(${data.entityNameFirstUpperCase!}Controller.class);\n	/*\n	 *【1】获取单个对象的方法用 get 做前缀。\n	 *【2】获取多个对象的方法用 list 做前缀。\n	 *【3】获取统计值的方法用 count 做nz前缀。\n	 *【4】插入的方法用 save（ 推荐 ） 或 insert 做前缀。\n	 *【5】删除的方法用 remove（ 推荐 ） 或 delete 做前缀。\n	 *【6】修改的方法用 update 做前缀。\n	 */\n	 \n	@Autowired\n	I${data.entityNameFirstUpperCase!}Service ${data.entityName!}Service;\n	\n	@ApiOperation(value = \"添加【${data.tableComment!}】\")\n	@ApiImplicitParams({ \n	<#list data.listColumnInfo as columnInfo>\n		<#-- 添加方法 字段是否必填 -->\n		<#assign param_required_bool=(columnInfo.columnConfig.configMap.add_param_required.data.val??&&columnInfo.columnConfig.configMap.add_param_required.data.val == \"true\") /> \n	    <#if !(columnInfo.columnKey??&&columnInfo.columnKey == \'PRI\')>\n	        <#if  columnInfo.entityName == \'creater\'>\n	        <#elseif  columnInfo.entityName == \'createTime\'>\n	        <#elseif  columnInfo.entityName == \'updater\'>\n	        <#elseif  columnInfo.entityName == \'updateTime\'>\n	        <#else>\n	            <#if  columnInfo.entityType == \'Date\'>\n	            @ApiImplicitParam(paramType = \"query\", dataType = \"String\", name = \"${columnInfo.entityName!}Str\", value = \"${columnInfo.columnComment!}\", required = ${param_required_bool?string}),\n				<#else>\n				@ApiImplicitParam(paramType = \"query\", dataType = \"${columnInfo.entityType}\", name = \"${columnInfo.entityName!}\", value = \"${columnInfo.columnComment!}\", required = ${param_required_bool?string}),\n				</#if>\n	    	</#if>\n		</#if>\n	</#list>				\n	})\n	@RequestMapping(value = \"save${data.entityNameFirstUpperCase!}\", method= {RequestMethod.POST})\n	public ResultData<Object> save${data.entityNameFirstUpperCase!}(\n	<#assign listIndex=0 /> \n	<#list data.listColumnInfo as columnInfo>\n		<#if !(columnInfo.columnKey??&&columnInfo.columnKey == \'PRI\')>\n			<#-- 添加方法 字段是否必填 -->\n			<#assign param_required_bool=(columnInfo.columnConfig.configMap.add_param_required.data.val??&&columnInfo.columnConfig.configMap.add_param_required.data.val == \"true\") /> \n			<#-- 是否校验字段 在数据库的最大长度 -->\n			<#assign verify_param_max_length=((columnInfo.entityType == \'String\')&&columnInfo.columnConfig.configMap.verify_column_length.data.val??&&columnInfo.columnConfig.configMap.verify_column_length.data.val == \"true\") />\n			<#if  columnInfo.entityName == \'creater\'>\n	        <#elseif  columnInfo.entityName == \'createTime\'>\n	        <#elseif  columnInfo.entityName == \'updater\'>\n	        <#elseif  columnInfo.entityName == \'updateTime\'>\n	        <#else>\n			    <#if  columnInfo.entityType == \'Date\'>\n			    	<#if listIndex!=0>,</#if>@RequestParam(required=${param_required_bool?string})<#if param_required_bool>@NotEmpty(message = \"参数[${columnInfo.entityName}]不能为空\")</#if><#if verify_param_max_length>@Length(min=0,max = ${columnInfo.columnTypeLength},message=\"参数[${columnInfo.entityName}]最大长度不能超过{max}\")</#if><#list columnInfo.columnConfig.configMap.param_regex.listData as x>${x.val!}</#list>\n			    	String ${columnInfo.entityName!}Str\n			    <#elseif  columnInfo.entityType == \'String\'>\n			    	<#if listIndex!=0>,</#if>@RequestParam(required=${param_required_bool?string})<#if param_required_bool>@NotEmpty(message = \"参数[${columnInfo.entityName}]不能为空\")</#if><#if verify_param_max_length>@Length(min=0,max = ${columnInfo.columnTypeLength},message=\"参数[${columnInfo.entityName}]最大长度不能超过{max}\")</#if><#list columnInfo.columnConfig.configMap.param_regex.listData as x>${x.val!}</#list>\n			    	String ${columnInfo.entityName!}\n			    <#else>\n			    	<#if listIndex!=0>,</#if>@RequestParam(required=${param_required_bool?string})<#if verify_param_max_length>@Length(min=0,max = ${columnInfo.columnTypeLength},message=\"参数[${columnInfo.entityName}]最大长度不能超过{max}\")</#if><#list columnInfo.columnConfig.configMap.param_regex.listData as x>${x.val!}</#list>\n			    	${columnInfo.entityType} ${columnInfo.entityName!}\n				</#if>\n				<#assign listIndex=listIndex+1 />\n			</#if>\n		</#if>\n	</#list>\n	) {\n		${data.entityNameFirstUpperCase!} ${data.entityName!}= new ${data.entityNameFirstUpperCase!}();\n		<#list data.listColumnInfo as columnInfo>\n			<#if !(columnInfo.columnKey??&&columnInfo.columnKey == \'PRI\')>\n				<#if  columnInfo.entityName == \'creater\'>\n					${data.entityName!}.setCreater(getCurrUserLoginId());\n		        <#elseif  columnInfo.entityName == \'createTime\'>\n		        	${data.entityName!}.setCreateTime(new Date());\n		        <#elseif  columnInfo.entityName == \'updater\'>\n		        	${data.entityName!}.setUpdater(null);\n		        <#elseif  columnInfo.entityName == \'updateTime\'>\n		        	${data.entityName!}.setUpdateTime(null);\n		        <#else>\n					<#assign listIndex=listIndex+1 />\n				    <#if  columnInfo.entityType == \'Date\'>\n				    	if (StringUtils.isNotBlank(${columnInfo.entityName!}Str)) {\n				    		Date ${columnInfo.entityName!} = new Date();//转一下\n							${data.entityName!}.set${columnInfo.entityNameFirstUpperCase!}(${columnInfo.entityName!});\n						}\n				    <#elseif  columnInfo.entityType == \'String\'>\n				    	if (StringUtils.isNotBlank(${columnInfo.entityName!})) {\n				    		<#-- 字段唯一性判断 -->\n				    		<#if  columnInfo.columnConfig.configMap.uniqueness.data.val??&&columnInfo.columnConfig.configMap.uniqueness.data.val == \"true\">\n				    		${data.entityNameFirstUpperCase!} ${data.entityName!}Tmp = ${data.entityName!}Service\n					    		.selectOne(new EntityWrapper<${data.entityNameFirstUpperCase!}>(\n					    			new ${data.entityNameFirstUpperCase!}()\n					    			.set${columnInfo.entityNameFirstUpperCase!}(${columnInfo.entityName!})\n					    		)\n				    		);\n							if(${data.entityName!}Tmp!=null) {\n								return new ResultData.Builder<Object>(ResultCode.verifyUniqueness).setMessage(\"参数：【${columnInfo.entityName!}】的值：【\"+${columnInfo.entityName!}+\"】已经存在\").build();\n							}\n							</#if>\n							${data.entityName!}.set${columnInfo.entityNameFirstUpperCase!}(${columnInfo.entityName!});\n						}\n				    <#else>\n				    	if (${columnInfo.entityName!} != null) {\n				    		<#-- 字段唯一性判断 -->\n				    		<#if columnInfo.columnConfig.configMap.uniqueness.data.val??&&columnInfo.columnConfig.configMap.uniqueness.data.val == \"true\">\n				    		${data.entityNameFirstUpperCase!} ${data.entityName!}Tmp = ${data.entityName!}Service\n					    		.selectOne(new EntityWrapper<${data.entityNameFirstUpperCase!}>(\n					    			new ${data.entityNameFirstUpperCase!}()\n					    			.set${columnInfo.entityNameFirstUpperCase!}(${columnInfo.entityName!})\n					    		)\n				    		);\n							if(${data.entityName!}Tmp!=null) {\n								return new ResultData.Builder<Object>(ResultCode.verifyUniqueness).setMessage(\"参数：【${columnInfo.entityName!}】的值：【\"+${columnInfo.entityName!}+\"】已经存在\").build();\n							}\n							</#if>\n							${data.entityName!}.set${columnInfo.entityNameFirstUpperCase!}(${columnInfo.entityName!});\n						}\n					</#if>\n				</#if>\n			</#if>\n		</#list>\n		${data.entityName!}Service.insert(${data.entityName!});\n		<#list data.listColumnInfo as columnInfo>\n		<#if columnInfo.columnKey??&&columnInfo.columnKey == \'PRI\'>\n		Object ${data.entityName!}Id = ${data.entityName!}.get${columnInfo.entityNameFirstUpperCase!}();\n		</#if>\n		</#list>\n		return new ResultData.Builder<Object>(ResultCode.success).setData(${data.entityName!}Id).build();\n	}\n	\n	@ApiOperation(value = \"修改【${data.tableComment!}】\")\n	@ApiImplicitParams({ \n	<#list data.listColumnInfo as columnInfo>\n		<#-- 修改方法 字段是否必填 -->\n		<#assign param_required_bool=(columnInfo.columnConfig.configMap.add_param_required.data.val??&&columnInfo.columnConfig.configMap.add_param_required.data.val == \"true\") /> \n	    <#if columnInfo.columnKey??&&columnInfo.columnKey == \'PRI\'>\n	    	@ApiImplicitParam(paramType = \"query\", dataType = \"${columnInfo.entityType}\", name = \"${columnInfo.entityName!}Str\", value = \"${columnInfo.columnComment!}\", required = true),\n	    <#else>\n	        <#if  columnInfo.entityName == \'creater\'>\n	        <#elseif  columnInfo.entityName == \'createTime\'>\n	        <#elseif  columnInfo.entityName == \'updater\'>\n	        <#elseif  columnInfo.entityName == \'updateTime\'>\n	        <#else>\n	            <#if  columnInfo.entityType == \'Date\'>\n	            @ApiImplicitParam(paramType = \"query\", dataType = \"String\", name = \"${columnInfo.entityName!}Str\", value = \"${columnInfo.columnComment!}\", required = ${param_required_bool?string}),\n				<#else>\n				@ApiImplicitParam(paramType = \"query\", dataType = \"${columnInfo.entityType}\", name = \"${columnInfo.entityName!}\", value = \"${columnInfo.columnComment!}\", required = ${param_required_bool?string}),\n				</#if>\n	    	</#if>\n		</#if>\n	</#list>			\n	})\n	@RequestMapping(value = \"edit${data.entityNameFirstUpperCase!}\", method= {RequestMethod.POST})\n	public ResultData<Object> edit${data.entityNameFirstUpperCase!}(\n	<#assign listIndex=0 /> \n	<#list data.listColumnInfo as columnInfo>\n		<#-- 修改方法 字段是否必填 -->\n		<#assign param_required_bool=(columnInfo.columnConfig.configMap.add_param_required.data.val??&&columnInfo.columnConfig.configMap.add_param_required.data.val == \"true\") /> \n		<#-- 是否校验字段 在数据库的最大长度 -->\n		<#assign verify_param_max_length=(columnInfo.entityType == \'String\'&&columnInfo.columnConfig.configMap.verify_column_length.data.val??&&columnInfo.columnConfig.configMap.verify_column_length.data.val == \"true\") />\n		<#if columnInfo.columnKey??&&columnInfo.columnKey == \'PRI\'>\n			<#if listIndex!=0>,</#if>@RequestParam(required=true)${columnInfo.entityType} ${columnInfo.entityName!}\n			<#assign listIndex=listIndex+1 />\n		<#else>\n			<#if  columnInfo.entityName == \'creater\'>\n	        <#elseif  columnInfo.entityName == \'createTime\'>\n	        <#elseif  columnInfo.entityName == \'updater\'>\n	        <#elseif  columnInfo.entityName == \'updateTime\'>\n	        <#else>\n			    <#if  columnInfo.entityType == \'Date\'>\n			    	<#if listIndex!=0>,</#if>@RequestParam(required=${param_required_bool?string})<#if param_required_bool>@NotEmpty(message = \"参数[${columnInfo.entityName}]不能为空\")</#if><#if verify_param_max_length>@Length(min=0,max = ${columnInfo.columnTypeLength},message=\"参数[${columnInfo.entityName}]最大长度不能超过{max}\")</#if><#list columnInfo.columnConfig.configMap.param_regex.listData as x>${x.val!}</#list>String ${columnInfo.entityName!}Str\n			    <#elseif  columnInfo.entityType == \'String\'>\n			    	<#if listIndex!=0>,</#if>@RequestParam(required=${param_required_bool?string})<#if param_required_bool>@NotEmpty(message = \"参数[${columnInfo.entityName}]不能为空\")</#if><#if verify_param_max_length>@Length(min=0,max = ${columnInfo.columnTypeLength},message=\"参数[${columnInfo.entityName}]最大长度不能超过{max}\")</#if><#list columnInfo.columnConfig.configMap.param_regex.listData as x>${x.val!}</#list>String ${columnInfo.entityName!}\n			    <#else>\n			    	<#if listIndex!=0>,</#if>@RequestParam(required=${param_required_bool?string})<#if verify_param_max_length>@Length(min=0,max = ${columnInfo.columnTypeLength},message=\"参数[${columnInfo.entityName}]最大长度不能超过{max}\")</#if><#list columnInfo.columnConfig.configMap.param_regex.listData as x>${x.val!}</#list>${columnInfo.entityType} ${columnInfo.entityName!}\n				</#if>\n				<#assign listIndex=listIndex+1 />\n			</#if>\n		</#if>\n	</#list>\n	) {\n		${data.entityNameFirstUpperCase!} ${data.entityName!} = ${data.entityName!}Service.selectById(${data.keyEntityName!});\n		if(${data.entityName!} == null) {\n			return new ResultData.Builder<Object>(ResultCode.isNull).build();\n		}\n		${data.entityName!}= new ${data.entityNameFirstUpperCase!}();\n		<#list data.listColumnInfo as columnInfo>\n			<#if  columnInfo.entityName == \'creater\'>\n				//${data.entityName!}.setCreater(null);\n	        <#elseif  columnInfo.entityName == \'createTime\'>\n	        	//${data.entityName!}.setCreateTime(null);\n	        <#elseif  columnInfo.entityName == \'updater\'>\n	        	${data.entityName!}.setUpdater(getCurrUserLoginId());\n	        <#elseif  columnInfo.entityName == \'updateTime\'>\n	        	${data.entityName!}.setUpdateTime(new Date());\n	        <#else>\n				<#assign listIndex=listIndex+1 />\n			    <#if  columnInfo.entityType == \'Date\'>\n			    	if (StringUtils.isNotBlank(${columnInfo.entityName!}Str)) {\n			    		Date ${columnInfo.entityName!} = new Date();//转一下\n						${data.entityName!}.set${columnInfo.entityNameFirstUpperCase!}(${columnInfo.entityName!});\n					}\n			    <#elseif  columnInfo.entityType == \'String\'>\n			    	if (StringUtils.isNotBlank(${columnInfo.entityName!})) {\n			    		<#-- 字段唯一性判断 -->\n			    		<#if columnInfo.columnConfig.configMap.uniqueness.data.val??&&columnInfo.columnConfig.configMap.uniqueness.data.val == \"true\">\n			    		${data.entityNameFirstUpperCase!} ${data.entityName!}Tmp = ${data.entityName!}Service\n				    		.selectOne(new EntityWrapper<${data.entityNameFirstUpperCase!}>(\n				    			new ${data.entityNameFirstUpperCase!}()\n				    			.set${columnInfo.entityNameFirstUpperCase!}(${columnInfo.entityName!})\n				    		)\n			    		);\n						if(${data.entityName!}Tmp!=null   \n							&& ${data.entityName!}Tmp.get${data.keyEntityNameFirstUpperCase!}()!=${data.keyEntityName!}) {\n							return new ResultData.Builder<Object>(ResultCode.verifyUniqueness).setMessage(\"参数：【${columnInfo.entityName!}】的值：【\"+${columnInfo.entityName!}+\"】已经存在\").build();\n						}\n						</#if>\n						${data.entityName!}.set${columnInfo.entityNameFirstUpperCase!}(${columnInfo.entityName!});\n					}\n			    <#else>\n			    	if (${columnInfo.entityName!} != null) {\n			    		<#-- 字段唯一性判断 -->\n			    		<#if columnInfo.columnConfig.configMap.uniqueness.data.val??&&columnInfo.columnConfig.configMap.uniqueness.data.val == \"true\">\n			    		${data.entityNameFirstUpperCase!} ${data.entityName!}Tmp = ${data.entityName!}Service\n				    		.selectOne(new EntityWrapper<${data.entityNameFirstUpperCase!}>(\n				    			new ${data.entityNameFirstUpperCase!}()\n				    			.set${columnInfo.entityNameFirstUpperCase!}(${columnInfo.entityName!})\n				    		)\n			    		);\n						if(${data.entityName!}Tmp!=null   \n							&& ${data.entityName!}Tmp.get${data.keyEntityNameFirstUpperCase!}()!=${data.keyEntityName!}) {\n							return new ResultData.Builder<Object>(ResultCode.verifyUniqueness).setMessage(\"参数：【${columnInfo.entityName!}】的值：【\"+${columnInfo.entityName!}+\"】已经存在\").build();\n						}\n						</#if>\n						${data.entityName!}.set${columnInfo.entityNameFirstUpperCase!}(${columnInfo.entityName!});\n					}\n				</#if>\n			</#if>\n		</#list>\n		${data.entityName!}Service.updateById(${data.entityName!});\n		return new ResultData.Builder<Object>(ResultCode.success).build();\n	}\n	@ApiOperation(value = \"删除【${data.tableComment!}】\")\n	@RequestMapping(value = \"del${data.entityNameFirstUpperCase!}\",method= {RequestMethod.POST})\n	public ResultData<Object> del${data.entityNameFirstUpperCase!}(@RequestParam(required = true)Long ${data.entityName!}Id) {\n		${data.entityNameFirstUpperCase!} ${data.entityName!} = ${data.entityName!}Service.selectById(${data.entityName!}Id);\n		if(${data.entityName!}==null){\n			return new ResultData.Builder<Object>(ResultCode.isNull).build();\n		}\n		// 自己根据需求放开注释吧\n		//物理删除\n		//${data.entityName!}Service.deleteById(${data.entityName!}Id);\n		//逻辑删除\n		//${data.entityName!}.setStatus(0);\n		//${data.entityName!}Service.updateById(${data.entityName!}Id);\n		return new ResultData.Builder<Object>(ResultCode.success).build();\n	}\n	\n	@ApiOperation(value = \"获取【${data.tableComment!}】\")\n	@RequestMapping(value = \"get${data.entityNameFirstUpperCase!}\",method= {RequestMethod.POST})\n	public ResultData<${data.entityNameFirstUpperCase!}> get${data.entityNameFirstUpperCase!}(@RequestParam(required = true)Long ${data.entityName!}Id) {\n		${data.entityNameFirstUpperCase!} ${data.entityName!} = ${data.entityName!}Service.selectById(${data.entityName!}Id);\n		if(${data.entityName!}==null){\n			return new ResultData.Builder<${data.entityNameFirstUpperCase!}>(ResultCode.isNull).build();\n		}\n		return new ResultData.Builder<${data.entityNameFirstUpperCase!}>(ResultCode.success).setData(${data.entityName!}).build();\n	}\n	\n	@ApiOperation(value = \"列表【${data.tableComment!}】\")\n	@ApiImplicitParams({ \n		@ApiImplicitParam(paramType = \"query\", dataType = \"Integer\", name = \"pageNum\", value = \"页码\", required = false),\n		@ApiImplicitParam(paramType = \"query\", dataType = \"Integer\", name = \"pageSize\", value = \"每页大小\", required = false),\n	<#list data.listColumnInfo as columnInfo>\n	    <#if  columnInfo.entityName == \'creater\'>\n	    <#elseif  columnInfo.entityName == \'createTime\'>\n	    	@ApiImplicitParam(paramType = \"query\", dataType = \"String\", name = \"start_${columnInfo.entityName!}\", value = \"开始-${columnInfo.columnComment!}\", required = false),\n			@ApiImplicitParam(paramType = \"query\", dataType = \"String\", name = \"end_${columnInfo.entityName!}\", value = \"截至-${columnInfo.columnComment!}\", required = false),\n	    <#elseif  columnInfo.entityName == \'updater\'>\n	    <#elseif  columnInfo.entityName == \'updateTime\'>\n	    <#else>\n	        <#if  columnInfo.entityType == \'Date\'>\n	        	@ApiImplicitParam(paramType = \"query\", dataType = \"String\", name = \"start_${columnInfo.entityName!}\", value = \"开始-${columnInfo.columnComment!}\", required = false),\n				@ApiImplicitParam(paramType = \"query\", dataType = \"String\", name = \"end_${columnInfo.entityName!}\", value = \"截至-${columnInfo.columnComment!}\", required = false),\n			<#else>\n				@ApiImplicitParam(paramType = \"query\", dataType = \"${columnInfo.entityType}\", name = \"${columnInfo.entityName!}\", value = \"${columnInfo.columnComment!}\", required = false),\n			</#if>\n		</#if>\n	</#list>\n	})\n	@RequestMapping(value = \"list${data.entityNameFirstUpperCase!}\",method= {RequestMethod.POST})\n	public ResultData<AdminPage<${data.entityNameFirstUpperCase!}>> list${data.entityNameFirstUpperCase!}(\n		@RequestParam(defaultValue=\"1\",required=false)Integer pageNum,\n		@RequestParam(defaultValue=\"10\",required=false)Integer pageSize,\n		<#assign listIndex=0 /> \n		<#list data.listColumnInfo as columnInfo>\n				<#if  columnInfo.entityName == \'creater\'>\n		        <#elseif  columnInfo.entityName == \'createTime\'>\n		        	<#if listIndex!=0>,</#if>@RequestParam(required=false)String start_${columnInfo.entityName!}\n				    <#assign listIndex=listIndex+1 />\n				    <#if listIndex!=0>,</#if>@RequestParam(required=false)String end_${columnInfo.entityName!}\n		        <#elseif  columnInfo.entityName == \'updater\'>\n		        <#elseif  columnInfo.entityName == \'updateTime\'>\n		        <#else>\n				    <#if  columnInfo.entityType == \'Date\'>\n				    	<#if listIndex!=0>,</#if>@RequestParam(required=false)String start_${columnInfo.entityName!}\n				    	<#assign listIndex=listIndex+1 />\n				    	<#if listIndex!=0>,</#if>@RequestParam(required=false)String end_${columnInfo.entityName!}\n				    <#elseif  columnInfo.entityType == \'String\'>\n				    	<#if listIndex!=0>,</#if>@RequestParam(required=false)String ${columnInfo.entityName!}\n				    <#else>\n				    	<#if listIndex!=0>,</#if>@RequestParam(required=false)${columnInfo.entityType} ${columnInfo.entityName!}\n					</#if>\n				</#if>\n			<#assign listIndex=listIndex+1 />\n		</#list>\n	) {\n		Map<String, Object> paramMap = new HashMap<String, Object>();\n		paramMap.put(\"pageNum\", pageNum);\n		paramMap.put(\"pageSize\", pageSize);\n		<#list data.listColumnInfo as columnInfo>\n	        <#if  columnInfo.entityName == \'createTime\'>\n	        	//开始-${columnInfo.columnComment!}\n				if(StringUtils.isNotBlank(start_${columnInfo.entityName})) {\n					paramMap.put(\"start_${columnInfo.entityName}\", start_${columnInfo.entityName});\n				}\n				//结束-${columnInfo.columnComment!}\n				if(StringUtils.isNotBlank(end_${columnInfo.entityName})) {\n					paramMap.put(\"end_${columnInfo.entityName}\", end_${columnInfo.entityName});\n				}\n			<#elseif  columnInfo.entityName == \'creater\'>\n	        <#elseif  columnInfo.entityName == \'updater\'>\n	        <#elseif  columnInfo.entityName == \'updateTime\'>\n	        <#else>\n			    <#if  columnInfo.entityType == \'Date\'>\n					//开始-${columnInfo.columnComment!}\n					if(StringUtils.isNotBlank(start_${columnInfo.entityName})) {\n						paramMap.put(\"start_${columnInfo.entityName}\", start_${columnInfo.entityName});\n					}\n					//结束-${columnInfo.columnComment!}\n					if(StringUtils.isNotBlank(end_${columnInfo.entityName})) {\n						paramMap.put(\"end_${columnInfo.entityName}\", end_${columnInfo.entityName});\n					}\n			    <#elseif  columnInfo.entityType == \'String\'>\n					//${columnInfo.columnComment!}\n					if(StringUtils.isNotBlank(${columnInfo.entityName})) {\n						paramMap.put(\"${columnInfo.entityName}\", ${columnInfo.entityName});\n					}\n			    <#else>\n					//${columnInfo.columnComment!}\n					if(${columnInfo.entityName!} != null) {\n						paramMap.put(\"${columnInfo.entityName}\", ${columnInfo.entityName});\n					}\n				</#if>\n			</#if>\n		</#list>\n		return ${data.entityName!}Service.list${data.entityNameFirstUpperCase!}(paramMap);\n	}\n}\n', 'controller', 'D:\\git\\authManager\\authManager-server\\src\\main\\java\\com\\authManager\\server\\controller\\${data.entityNameFirstUpperCase!}Controller.java');
INSERT INTO `template` VALUES ('23', '13', 'package com.authManager.commons.feignApi;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport com.authManager.commons.feignApi.hystric.${data.entityNameFirstUpperCase!}ApiHystric;\n\nimport com.authManager.entity.${data.entityNameFirstUpperCase!};\nimport com.commons.base.model.AdminPage;\nimport com.commons.base.model.ResultData;\n\n@FeignClient(value = \"authManager-server\" , fallback = ${data.entityNameFirstUpperCase!}ApiHystric.class)\npublic interface ${data.entityNameFirstUpperCase!}Api {\n	static final String projectAaaApiBaseUrl =\"/authManager-server/admin/${data.entityName!}\";\n			\n	/**\n	 *添加【${data.tableComment!}】\n	 */\n	@RequestMapping(value = projectAaaApiBaseUrl+\"/save${data.entityNameFirstUpperCase!}\", method= {RequestMethod.POST})\n	public ResultData<Object> save${data.entityNameFirstUpperCase!}(\n	<#assign listIndex=0 /> \n	<#list data.listColumnInfo as columnInfo>\n		<#if !(columnInfo.columnKey??&&columnInfo.columnKey == \'PRI\')>\n			<#if  columnInfo.entityName == \'creater\'>\n	        <#elseif  columnInfo.entityName == \'createTime\'>\n	        <#elseif  columnInfo.entityName == \'updater\'>\n	        <#elseif  columnInfo.entityName == \'updateTime\'>\n	        <#else>\n			    <#if  columnInfo.entityType == \'Date\'>\n			    	<#if listIndex!=0>,</#if>@RequestParam(required=false)String ${columnInfo.entityName!}Str\n			    <#elseif  columnInfo.entityType == \'String\'>\n			    	<#if listIndex!=0>,</#if>@RequestParam(required=false)String ${columnInfo.entityName!}\n			    <#else>\n			    	<#if listIndex!=0>,</#if>@RequestParam(required=false)${columnInfo.entityType} ${columnInfo.entityName!}\n				</#if>\n				<#assign listIndex=listIndex+1 />\n			</#if>\n		</#if>\n	</#list>\n	);\n	\n	/**\n	 *修改【${data.tableComment!}】\n	 */\n	@RequestMapping(value = projectAaaApiBaseUrl+\"/edit${data.entityNameFirstUpperCase!}\", method= {RequestMethod.POST})\n	public ResultData<Object> edit${data.entityNameFirstUpperCase!}(\n	<#assign listIndex=0 /> \n	<#list data.listColumnInfo as columnInfo>\n		<#if columnInfo.columnKey??&&columnInfo.columnKey == \'PRI\'>\n			<#if listIndex!=0>,</#if>@RequestParam(required=true)${columnInfo.entityType} ${columnInfo.entityName!}\n			<#assign listIndex=listIndex+1 />\n		<#else>\n			<#if  columnInfo.entityName == \'creater\'>\n	        <#elseif  columnInfo.entityName == \'createTime\'>\n	        <#elseif  columnInfo.entityName == \'updater\'>\n	        <#elseif  columnInfo.entityName == \'updateTime\'>\n	        <#else>\n			    <#if  columnInfo.entityType == \'Date\'>\n			    	<#if listIndex!=0>,</#if>@RequestParam(required=false)String ${columnInfo.entityName!}Str\n			    <#elseif  columnInfo.entityType == \'String\'>\n			    	<#if listIndex!=0>,</#if>@RequestParam(required=false)String ${columnInfo.entityName!}\n			    <#else>\n			    	<#if listIndex!=0>,</#if>@RequestParam(required=false)${columnInfo.entityType} ${columnInfo.entityName!}\n				</#if>\n				<#assign listIndex=listIndex+1 />\n			</#if>\n		</#if>\n	</#list>\n	);\n	\n	/**\n	 *删除【${data.tableComment!}】\n	 */\n	@RequestMapping(value = projectAaaApiBaseUrl+\"/del${data.entityNameFirstUpperCase!}\",method= {RequestMethod.POST})\n	public ResultData<Object> del${data.entityNameFirstUpperCase!}(@RequestParam(required = true)Long ${data.entityName!}Id);\n	\n	/**\n	 *获取【${data.tableComment!}】\n	 */\n	@RequestMapping(value = projectAaaApiBaseUrl+\"/get${data.entityNameFirstUpperCase!}\",method= {RequestMethod.POST})\n	public ResultData<${data.entityNameFirstUpperCase!}> get${data.entityNameFirstUpperCase!}(@RequestParam(required = true)Long ${data.entityName!}Id);\n	\n	/**\n	 *列表【${data.tableComment!}】\n	 */\n	@RequestMapping(value = projectAaaApiBaseUrl+\"/list${data.entityNameFirstUpperCase!}\",method= {RequestMethod.POST})\n	public ResultData<AdminPage<${data.entityNameFirstUpperCase!}>> list${data.entityNameFirstUpperCase!}(\n		@RequestParam(defaultValue=\"1\",required=false)Integer pageNum,\n		@RequestParam(defaultValue=\"10\",required=false)Integer pageSize,\n		<#assign listIndex=0 /> \n		<#list data.listColumnInfo as columnInfo>\n				<#if  columnInfo.entityName == \'creater\'>\n		        <#elseif  columnInfo.entityName == \'createTime\'>\n		        <#if listIndex!=0>,</#if>@RequestParam(required=false)String start_${columnInfo.entityName!}\n				    <#assign listIndex=listIndex+1 />\n				    <#if listIndex!=0>,</#if>@RequestParam(required=false)String end_${columnInfo.entityName!}\n		        <#elseif  columnInfo.entityName == \'updater\'>\n		        <#elseif  columnInfo.entityName == \'updateTime\'>\n		        <#else>\n				    <#if  columnInfo.entityType == \'Date\'>\n				    	<#if listIndex!=0>,</#if>@RequestParam(required=false)String start_${columnInfo.entityName!}\n				    	<#assign listIndex=listIndex+1 />\n				    	<#if listIndex!=0>,</#if>@RequestParam(required=false)String end_${columnInfo.entityName!}\n				    <#elseif  columnInfo.entityType == \'String\'>\n				    	<#if listIndex!=0>,</#if>@RequestParam(required=false)String ${columnInfo.entityName!}\n				    <#else>\n				    	<#if listIndex!=0>,</#if>@RequestParam(required=false)${columnInfo.entityType} ${columnInfo.entityName!}\n					</#if>\n				</#if>\n			<#assign listIndex=listIndex+1 />\n		</#list>\n	);\n}\n', 'feignClient', 'D:\\git\\authManager\\authManager-commons\\src\\main\\java\\com\\authManager\\commons\\feignApi\\${data.entityNameFirstUpperCase!}Api.java');
INSERT INTO `template` VALUES ('24', '13', 'package com.authManager.commons.feignApi.hystric;\n\n\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.stereotype.Component;\n\nimport com.authManager.commons.feignApi.${data.entityNameFirstUpperCase!}Api;\nimport com.authManager.entity.${data.entityNameFirstUpperCase!};\n\nimport com.commons.base.model.AdminPage;\nimport com.commons.base.model.ResultCode;\nimport com.commons.base.model.ResultData;\n\n@Component\npublic class ${data.entityNameFirstUpperCase!}ApiHystric implements ${data.entityNameFirstUpperCase!}Api{\n			\n	@Override\n	public ResultData<Object> save${data.entityNameFirstUpperCase!}(\n	<#assign listIndex=0 /> \n	<#list data.listColumnInfo as columnInfo>\n		<#if !(columnInfo.columnKey??&&columnInfo.columnKey == \'PRI\')>\n			<#if  columnInfo.entityName == \'creater\'>\n	        <#elseif  columnInfo.entityName == \'createTime\'>\n	        <#elseif  columnInfo.entityName == \'updater\'>\n	        <#elseif  columnInfo.entityName == \'updateTime\'>\n	        <#else>\n			    <#if  columnInfo.entityType == \'Date\'>\n			    	<#if listIndex!=0>,</#if>String ${columnInfo.entityName!}Str\n			    <#elseif  columnInfo.entityType == \'String\'>\n			    	<#if listIndex!=0>,</#if>String ${columnInfo.entityName!}\n			    <#else>\n			    	<#if listIndex!=0>,</#if>${columnInfo.entityType} ${columnInfo.entityName!}\n				</#if>\n				<#assign listIndex=listIndex+1 />\n			</#if>\n		</#if>\n	</#list>\n	){\n		return new ResultData.Builder<Object>(ResultCode.reqeust_TimeOut).build();\n	};\n	@Override\n	public ResultData<Object> edit${data.entityNameFirstUpperCase!}(\n	<#assign listIndex=0 /> \n	<#list data.listColumnInfo as columnInfo>\n		<#if columnInfo.columnKey??&&columnInfo.columnKey == \'PRI\'>\n			<#if listIndex!=0>,</#if>@RequestParam(required=true)${columnInfo.entityType} ${columnInfo.entityName!}\n			<#assign listIndex=listIndex+1 />\n		<#else>\n			<#if  columnInfo.entityName == \'creater\'>\n	        <#elseif  columnInfo.entityName == \'createTime\'>\n	        <#elseif  columnInfo.entityName == \'updater\'>\n	        <#elseif  columnInfo.entityName == \'updateTime\'>\n	        <#else>\n			    <#if  columnInfo.entityType == \'Date\'>\n			    	<#if listIndex!=0>,</#if>String ${columnInfo.entityName!}Str\n			    <#elseif  columnInfo.entityType == \'String\'>\n			    	<#if listIndex!=0>,</#if>String ${columnInfo.entityName!}\n			    <#else>\n			    	<#if listIndex!=0>,</#if>${columnInfo.entityType} ${columnInfo.entityName!}\n				</#if>\n				<#assign listIndex=listIndex+1 />\n			</#if>\n		</#if>\n	</#list>\n	){\n		return new ResultData.Builder<Object>(ResultCode.reqeust_TimeOut).build();\n	};\n	\n	@Override\n	public ResultData<Object> del${data.entityNameFirstUpperCase!}(Long ${data.entityName!}Id){\n		return new ResultData.Builder<Object>(ResultCode.reqeust_TimeOut).build();\n	};\n	\n	@Override\n	public ResultData<${data.entityNameFirstUpperCase!}> get${data.entityNameFirstUpperCase!}(Long ${data.entityName!}Id){\n		return new ResultData.Builder<${data.entityNameFirstUpperCase!}>(ResultCode.reqeust_TimeOut).build();\n	};\n	\n	@Override\n	public ResultData<AdminPage<${data.entityNameFirstUpperCase!}>> list${data.entityNameFirstUpperCase!}(\n		Integer pageNum,\n		Integer pageSize,\n		<#assign listIndex=0 /> \n		<#list data.listColumnInfo as columnInfo>\n				<#if  columnInfo.entityName == \'creater\'>\n		        <#elseif  columnInfo.entityName == \'createTime\'>\n		        <#if listIndex!=0>,</#if>String start_${columnInfo.entityName!}\n				    <#assign listIndex=listIndex+1 />\n				    <#if listIndex!=0>,</#if>String end_${columnInfo.entityName!}\n		        <#elseif  columnInfo.entityName == \'updater\'>\n		        <#elseif  columnInfo.entityName == \'updateTime\'>\n		        <#else>\n				    <#if  columnInfo.entityType == \'Date\'>\n				    	<#if listIndex!=0>,</#if>String start_${columnInfo.entityName!}\n				    	<#assign listIndex=listIndex+1 />\n				    	<#if listIndex!=0>,</#if>String end_${columnInfo.entityName!}\n				    <#elseif  columnInfo.entityType == \'String\'>\n				    	<#if listIndex!=0>,</#if>String ${columnInfo.entityName!}\n				    <#else>\n				    	<#if listIndex!=0>,</#if>${columnInfo.entityType} ${columnInfo.entityName!}\n					</#if>\n				</#if>\n			<#assign listIndex=listIndex+1 />\n		</#list>\n	){\n		return new ResultData.Builder<AdminPage<${data.entityNameFirstUpperCase!}>>(ResultCode.reqeust_TimeOut).build();\n	};\n}\n', 'feignHystric', 'D:\\git\\authManager\\authManager-commons\\src\\main\\java\\com\\authManager\\commons\\feignApi\\hystric\\${data.entityNameFirstUpperCase!}ApiHystric.java');
